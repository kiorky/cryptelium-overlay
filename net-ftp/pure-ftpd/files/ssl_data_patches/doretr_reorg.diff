Index: pure-ftpd-1.0.22/src/ftpd.c
===================================================================
--- pure-ftpd-1.0.22.orig/src/ftpd.c
+++ pure-ftpd-1.0.22/src/ftpd.c
@@ -70,7 +70,7 @@ void usleep2(const unsigned long microse
 
 int safe_write(const int fd, const void *buf_, size_t count)
 {
-    ssize_t written;    
+    ssize_t written;
     register const char *buf = (const char *) buf_;
 
     while (count > (size_t) 0U) {
@@ -2458,7 +2458,7 @@ void opendata(void)
         closedata();
     }
     if (datafd == -1) {
-        addreply_noformat(425, MSG_NO_DATA_CONN);        
+        addreply_noformat(425, MSG_NO_DATA_CONN);
         return;
     }
 
@@ -2557,10 +2557,10 @@ void opendata(void)
 #endif
 #ifdef SO_SNDBUF
         setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (char *) &fodder, sizeof fodder);
-#endif        
+#endif
 #ifdef SO_RCVBUF
         setsockopt(fd, SOL_SOCKET, SO_RCVBUF, (char *) &fodder, sizeof fodder);
-#endif        
+#endif
 #endif
 #ifndef NO_KEEPALIVE
         keepalive(fd, 1);
@@ -2891,7 +2891,7 @@ static ssize_t doasciiwrite(int fd, cons
     register char *asciibufpnt;
     size_t z = (size_t) 0U;
     int writeret;
-        
+
     if (size <= (size_t) 0U) {         /* stupid paranoia #1 */
         return (ssize_t) 0;
     }
@@ -3054,6 +3054,267 @@ static void displayopenfailure(const cha
     error(550, buffer);
 }
 
+#ifndef SENDFILE_NONE
+int sendfile_send(int f, struct stat st)
+{
+    off_t left;
+    off_t o;
+
+    o = restartat;
+	while (o < st.st_size) {
+# ifdef FTPWHO
+    /* There is no locking here, and it is intentional */
+        if (shm_data_cur != NULL) {
+            shm_data_cur->download_current_size = o;
+        }
+# endif
+        left = st.st_size - o;
+# ifdef FTPWHO
+        if (left > (off_t) dl_chunk_size) {
+            left = (off_t) dl_chunk_size;
+        }
+# elif defined(THROTTLING)
+        if (throttling_bandwidth_dl > 0UL &&
+            left > (off_t) dl_chunk_size) {
+            left = (off_t) dl_chunk_size;
+        }
+# endif
+        while (left > (off_t) 0) {
+# ifdef SENDFILE_LINUX
+            ssize_t w;
+
+            do {
+                w = sendfile(xferfd, f, &o, (size_t) left);
+            } while (w < 0 && errno == EINTR);
+            if (w == 0) {
+                w--;
+            }
+# elif defined(SENDFILE_FREEBSD)
+            off_t w;
+
+            if (sendfile(f, xferfd, o, (size_t) left, NULL, &w, 0) < 0) {
+                if ((errno != EAGAIN && errno != EINTR) || w < (off_t) 0) {
+                    w = (off_t) -1;
+                } else {
+                    o += w;
+                }
+            } else {
+                o += w;
+            }
+# elif defined(SENDFILE_HPUX)
+            sbsize_t w;
+
+            if ((w = sendfile(xferfd, f, o, (bsize_t) left,NULL, 0)) < 0) {
+                if ((errno != EAGAIN && errno != EINTR) || w < (off_t) 0) {
+                    w = (off_t) -1;
+                } else {
+                    o += w;
+                }
+            } else {
+                o += w;
+            }
+# elif defined(SENDFILEV_SOLARIS)
+            ssize_t w;
+            struct sendfilevec vec[1];
+
+            vec[0].sfv_fd   = f;
+            vec[0].sfv_flag = 0;
+            vec[0].sfv_off  = o;
+            vec[0].sfv_len  = (size_t) left;
+            if (sendfilev(xferfd, vec, 1, &w) < 0) {
+                if ((errno != EAGAIN && errno != EINTR) || w < (off_t) 0) {
+                    w = (off_t) -1;
+                } else {
+                    o += w;
+                }
+            } else {
+                o += w;
+            }
+# endif
+            if (w < 0) {
+                if (errno == EAGAIN || errno == EINTR) {
+                    /* wait idletime seconds for progsress */
+                    fd_set rs;
+                    fd_set ws;
+                    struct timeval tv;
+
+                    FD_ZERO(&rs);
+                    FD_ZERO(&ws);
+                    FD_SET(0, &rs);
+                    safe_fd_set(xferfd, &ws);
+                    tv.tv_sec = idletime;
+                    tv.tv_usec = 0;
+                    if (xferfd == -1 ||
+                        select(xferfd + 1, &rs, &ws, NULL, &tv) <= 0 ||
+                        FD_ISSET(0, &rs)) {
+                        /* we assume it is ABRT since nothing else is legal */
+                        (void) close(f);
+                        closedata();
+                        addreply_noformat(426, MSG_ABORTED);
+                        return -1;
+                    } else if (!(safe_fd_isset(xferfd, &ws))) {
+                    /* client presumably gone away */
+                        closedata();
+                        die(421, LOG_INFO, MSG_TIMEOUT_DATA,
+                            (unsigned long) idletime);
+                    }
+                w = 0;
+                } else {
+                    (void) close(f);
+                    if (xferfd != -1) {
+                        closedata();
+                        addreply_noformat(450, MSG_DATA_WRITE_FAILED);
+                        logfile(LOG_INFO, MSG_ABORTED);
+                    }
+                    return -1;
+                }
+            }
+
+            if (w < 0) {        /* Maybe the file has shrunk? */
+                if (fstat(f, &st) < 0) {
+                    o = st.st_size;
+                }
+                left = (off_t) 0;
+            } else if (w != 0) {
+                downloaded += (unsigned long long) w;
+                left -= w;
+# ifdef THROTTLING
+                if (o < st.st_size && throttling_bandwidth_dl > 0UL) {
+                    long double delay;
+                    ended = get_usec_time();
+                    transmitted += w;
+                    delay = (transmitted /
+                            (long double) throttling_bandwidth_dl) -
+                            (long double) (ended - started);
+                    if (delay > (long double) MAX_THROTTLING_DELAY) {
+                        started = ended;
+                        transmitted = (off_t) 0;
+                        delay = (long double) MAX_THROTTLING_DELAY;
+                    }
+                    if (delay > 0.0L) {
+                        usleep2((unsigned long) (delay * 1000000.0L));s
+                    }
+                }
+# endif
+            }
+        }
+    }
+
+    return 0;
+}
+#endif  /*  End !defined(SENDFILE_NONE) */
+
+int mmap_send(int f, struct stat st)
+{
+    off_t s;
+    off_t skip;
+    off_t o;
+    char *p, *buf;
+    off_t left;
+
+    o = restartat & ~(map_size - 1);
+    skip = restartat - o;
+    while (o < st.st_size) {
+# ifdef FTPWHO
+        if (shm_data_cur != NULL) {
+            shm_data_cur->download_current_size = o;
+        }
+# endif
+        left = st.st_size - o;
+        if (left > (off_t) dl_chunk_size) {
+            left = (off_t) dl_chunk_size;
+        }
+        buf = mmap(0, left, PROT_READ, MAP_FILE | MAP_SHARED, f, o);
+        if (buf == (char *) MAP_FAILED) {
+            closedata();
+            (void) close(f);
+            error(451, MSG_MMAP_FAILED);
+            return -1;
+        }
+        p = buf;
+        o += left;
+        s = left;
+        while (left > skip) {
+            ssize_t w;
+
+# ifdef WITH_GSSAPI
+            if (useKerberos != 0 && dataProtectionLevel != NONE &&
+                dataProtectionLevel != CLEAR) {
+                w = protectedWrite (xferfd, p + skip, (size_t) (left - skip));
+            } else
+# endif
+            {
+                while ((w = write(xferfd, p + skip, (size_t) (left - skip))) <
+                       (ssize_t) 0 && errno == EINTR);
+            }
+            if (w < (ssize_t) 0) {
+                if (errno == EAGAIN && xferfd != -1) {
+                /* wait idletime seconds for progress */
+                    fd_set rs;
+                    fd_set ws;
+                    struct timeval tv;
+
+                    FD_ZERO(&rs);
+                    FD_ZERO(&ws);
+                    FD_SET(0, &rs);
+                    safe_fd_set(xferfd, &ws);
+                    tv.tv_sec = idletime;
+                    tv.tv_usec = 0;
+                    if (xferfd == -1 ||
+                        select(xferfd + 1, &rs, &ws, NULL, &tv) <= 0 ||
+                        FD_ISSET(0, &rs)) {
+                        /* we assume it is ABRT since nothing else is legal */
+                        (void) munmap(buf, s);
+                        (void) close(f);
+                        closedata();
+                        addreply_noformat(426, MSG_ABORTED);
+                        return -1;
+                    } else if (!(safe_fd_isset(xferfd, &ws))) {
+                        /* client presumably gone away */
+                        die(421, LOG_INFO, MSG_TIMEOUT_DATA ,
+                            (unsigned long) idletime);
+                    }
+                    w = (ssize_t) 0;
+                } else {
+                        (void) close(f);
+                        if (xferfd != -1) {
+                            closedata();
+                            addreply_noformat(450, MSG_DATA_WRITE_FAILED);
+                            logfile(LOG_INFO, MSG_ABORTED);
+                        }
+                        return -1;
+                }
+            }
+            downloaded += (unsigned long long) w;
+            left -= w;
+            p += w;
+# ifdef THROTTLING
+            if (throttling_bandwidth_dl > 0UL) {
+                long double delay;
+
+                ended = get_usec_time();
+                transmitted += w;
+                delay = (transmitted /
+                         (long double) throttling_bandwidth_dl) -
+                         (long double) (ended - started);
+                if (delay > (long double) MAX_THROTTLING_DELAY) {
+                    started = ended;
+                    transmitted = (off_t) 0;
+                    delay = (long double) MAX_THROTTLING_DELAY;
+                }
+                if (delay > 0.0L) {
+                    usleep2((unsigned long) (delay * 1000000.0L));
+                }
+            }
+# endif
+        }
+        skip = (off_t) 0;
+        (void) munmap(buf, s);
+    }
+
+    return 0;
+}
+
 void doretr(char *name)
 {
     int f;
@@ -3140,13 +3401,13 @@ void doretr(char *name)
         /* some clients insist on doing this.  I can't imagine why. */
         addreply_noformat(226, MSG_NO_MORE_TO_DOWNLOAD);
         (void) close(f);
-    closedata();
+        closedata();
         goto end;
     }
 #ifdef NON_BLOCKING_DATA_SOCKET
     {
         int flags;
-        
+
         if ((flags = fcntl(xferfd, F_GETFL, 0)) < 0) {
         (void) close(f);
     closedata();
@@ -3198,261 +3459,21 @@ void doretr(char *name)
     if (type == 2)
 #endif
     {            /* Binary */
-        o = restartat;
         CORK_ON(xferfd);
 #ifndef SENDFILE_NONE
 # ifdef WITH_GSSAPI
         if (useKerberos == 0 || dataProtectionLevel == NONE ||
-            dataProtectionLevel == CLEAR) {
-# endif /* WITH_GSSAPI */
-            while (o < st.st_size) {
-# ifdef FTPWHO
-                /* There is no locking here, and it is intentional */
-                if (shm_data_cur != NULL) {
-                    shm_data_cur->download_current_size = o;
-                }
-# endif
-                left = st.st_size - o;
-# ifdef FTPWHO
-                if (left > (off_t) dl_chunk_size) {
-                    left = (off_t) dl_chunk_size;
-                }
-# elif defined(THROTTLING)            
-                if (throttling_bandwidth_dl > 0UL &&
-                    left > (off_t) dl_chunk_size) {
-                    left = (off_t) dl_chunk_size;
-                }
-# endif
-                while (left > (off_t) 0) {
-# ifdef SENDFILE_LINUX
-                    ssize_t w;
-
-                    do {
-                        w = sendfile(xferfd, f, &o, (size_t) left);
-                    } while (w < 0 && errno == EINTR);
-                    if (w == 0) {
-                        w--;
-                    }
-# elif defined(SENDFILE_FREEBSD)
-                    off_t w;
-                    
-                    if (sendfile(f, xferfd, o, (size_t) left, NULL,
-                                 &w, 0) < 0) {
-                        if ((errno != EAGAIN && errno != EINTR) ||
-                            w < (off_t) 0) {
-                            w = (off_t) -1;
-                        } else {
-                            o += w;
-                        }
-                    } else {
-                        o += w;
-                    }
-# elif defined(SENDFILE_HPUX)
-                    sbsize_t w; 
-
-                    if ((w = sendfile(xferfd, f, o, (bsize_t) left,
-                                      NULL, 0)) < 0) {
-                        if ((errno != EAGAIN && errno != EINTR) ||
-                            w < (off_t) 0) {
-                            w = (off_t) -1;
-                        } else {
-                            o += w;
-                        }
-                    } else {
-                        o += w;
-                    }
-# elif defined(SENDFILEV_SOLARIS)
-                    ssize_t w;
-                    struct sendfilevec vec[1];
-
-                    vec[0].sfv_fd   = f;
-                    vec[0].sfv_flag = 0;
-                    vec[0].sfv_off  = o;
-                    vec[0].sfv_len  = (size_t) left;
-                    if (sendfilev(xferfd, vec, 1, &w) < 0) {
-                        if ((errno != EAGAIN && errno != EINTR) ||
-                            w < (off_t) 0) {
-                            w = (off_t) -1;
-                        } else {
-                            o += w;
-                        }
-                    } else {
-                        o += w;
-                    }
-# endif
-                    if (w < 0) {
-                        if (errno == EAGAIN || errno == EINTR) {
-                            /* wait idletime seconds for progress */
-                            fd_set rs;
-                            fd_set ws;
-                            struct timeval tv;
-
-                            FD_ZERO(&rs);
-                            FD_ZERO(&ws);
-                            FD_SET(0, &rs);
-                            safe_fd_set(xferfd, &ws);
-                            tv.tv_sec = idletime;
-                            tv.tv_usec = 0;                        
-                            if (xferfd == -1 ||
-                                select(xferfd + 1, &rs, &ws, NULL, &tv) <= 0 ||
-                                FD_ISSET(0, &rs)) {
-                                /* we assume it is ABRT since nothing else is legal */
-                                (void) close(f);
-                                closedata();
-                                addreply_noformat(426, MSG_ABORTED);
-                                goto end;
-                            } else if (!(safe_fd_isset(xferfd, &ws))) {
-                                /* client presumably gone away */
-                                closedata();
-                                die(421, LOG_INFO, MSG_TIMEOUT_DATA ,
-                                    (unsigned long) idletime);
-                            }
-                            w = 0;
-                        } else {
-                            (void) close(f);
-                            if (xferfd != -1) {
-                                closedata();
-                                addreply_noformat(450, MSG_DATA_WRITE_FAILED);
-                                logfile(LOG_INFO, MSG_ABORTED);
-                            }
-                            goto end;
-                        }
-                    }
-                    if (w < 0) {        /* Maybe the file has shrunk? */
-                        if (fstat(f, &st) < 0) {
-                            o = st.st_size;
-                        }
-                        left = (off_t) 0;
-                    } else if (w != 0) {
-                        downloaded += (unsigned long long) w;
-                        left -= w;
-# ifdef THROTTLING
-                        if (o < st.st_size && throttling_bandwidth_dl > 0UL) {
-                            long double delay;
-                            ended = get_usec_time();
-                            transmitted += w;
-                            delay = (transmitted 
-                                     / (long double) throttling_bandwidth_dl)
-                                - (long double) (ended - started);
-                            if (delay > (long double) MAX_THROTTLING_DELAY) {
-                                started = ended;
-                                transmitted = (off_t) 0;
-                                delay = (long double) MAX_THROTTLING_DELAY;
-                            }
-                            if (delay > 0.0L) {
-                                usleep2((unsigned long) (delay * 1000000.0L));
-                            }
-                        }
-# endif
-                    }
-                }
-            }
-
-# ifdef WITH_GSSAPI
+            dataProtectionLevel == CLEAR)
+# endif /* End WITH_GSSAPI */
+        {
+            if (sendfile_send(f, st) < 0)
+                goto end;
         }
-# endif /* WITH_GSSAPI */
 #endif  /*      End !defined(SENDFILE_NONE)     */
 
 #if defined(SENDFILE_NONE) || defined(WITH_GSSAPI)
-        o = restartat & ~(map_size - 1);
-        skip = restartat - o;
-        while (o < st.st_size) {
-# ifdef FTPWHO
-            if (shm_data_cur != NULL) {
-                shm_data_cur->download_current_size = o;
-            }
-# endif
-            left = st.st_size - o;
-            if (left > (off_t) dl_chunk_size) {
-                left = (off_t) dl_chunk_size;
-            }
-            buf = mmap(0, left, PROT_READ, MAP_FILE | MAP_SHARED, f, o);
-            if (buf == (char *) MAP_FAILED) {
-                closedata();
-                (void) close(f);
-                error(451, MSG_MMAP_FAILED);
-                goto end;
-            }
-            p = buf;
-            o += left;
-            s = left;
-            while (left > skip) {
-                ssize_t w;
-                
-# ifdef WITH_GSSAPI
-                if (useKerberos != 0 && dataProtectionLevel != NONE &&
-                    dataProtectionLevel != CLEAR) {
-                    w = protectedWrite (xferfd, p + skip, (size_t) (left - skip));
-                } else
-# endif
-                {
-                while ((w = write(xferfd, p + skip, (size_t) (left - skip))) <
-                       (ssize_t) 0 && errno == EINTR);
-                }
-                if (w < (ssize_t) 0) {
-                    if (errno == EAGAIN && xferfd != -1) {
-                        /* wait idletime seconds for progress */
-                        fd_set rs;
-                        fd_set ws;
-                        struct timeval tv;
-
-                        FD_ZERO(&rs);
-                        FD_ZERO(&ws);
-                        FD_SET(0, &rs);
-                        safe_fd_set(xferfd, &ws);
-                        tv.tv_sec = idletime;
-                        tv.tv_usec = 0;                        
-                        if (xferfd == -1 ||
-                            select(xferfd + 1, &rs, &ws, NULL, &tv) <= 0 ||
-                            FD_ISSET(0, &rs)) {
-                            /* we assume it is ABRT since nothing else is legal */
-                            (void) munmap(buf, s);
-                            (void) close(f);
-                            closedata();
-                            addreply_noformat(426, MSG_ABORTED);
-                            goto end;
-                        } else if (!(safe_fd_isset(xferfd, &ws))) {
-                            /* client presumably gone away */
-                            die(421, LOG_INFO, MSG_TIMEOUT_DATA ,
-                                (unsigned long) idletime);
-                        }
-                        w = (ssize_t) 0;
-                    } else {
-                        (void) close(f);
-                        if (xferfd != -1) {
-                            closedata();
-                            addreply_noformat(450, MSG_DATA_WRITE_FAILED);
-                            logfile(LOG_INFO, MSG_ABORTED);
-                        }
-                        goto end;
-                    }
-                }
-                downloaded += (unsigned long long) w;
-                left -= w;
-                p += w;
-# ifdef THROTTLING
-                if (throttling_bandwidth_dl > 0UL) {
-                    long double delay;
-
-                    ended = get_usec_time();
-                    transmitted += w;
-                    delay = (transmitted / 
-                             (long double) throttling_bandwidth_dl)
-                        - (long double) (ended - started);
-                    if (delay > (long double) MAX_THROTTLING_DELAY) {
-                        started = ended;
-                        transmitted = (off_t) 0;
-                        delay = (long double) MAX_THROTTLING_DELAY;
-                    }
-                    if (delay > 0.0L) {
-                        usleep2((unsigned long) (delay * 1000000.0L));
-                    }
-                }
-# endif
-            }
-            skip = (off_t) 0;
-            (void) munmap(buf, s);
-        }
+        if (mmap_send(f, st) < 0)
+            goto end;
 #endif  /*      SENDFILE_NONE || WITH_GSSAPI    */
     }
 #ifndef WITHOUT_ASCII
@@ -3472,7 +3493,7 @@ void doretr(char *name)
             }
             if (left > (off_t) ASCII_CHUNKSIZE) {
                 left = ASCII_CHUNKSIZE;
-            }                
+            }
             buf = mmap(0, left, PROT_READ, MAP_FILE | MAP_SHARED, f, o);
             if (buf == (char *) MAP_FAILED) {
                 closedata();
@@ -3499,7 +3520,7 @@ void doretr(char *name)
                         FD_SET(0, &rs);
                         safe_fd_set(xferfd, &ws);
                         tv.tv_sec = idletime;
-                        tv.tv_usec = 0;                        
+                        tv.tv_usec = 0;
                         if (xferfd == -1 ||
                             select(xferfd + 1, &rs, &ws, NULL, &tv) <= 0 ||
                             FD_ISSET(0, &rs)) {
@@ -3570,7 +3591,7 @@ void doretr(char *name)
     closedata();
     displayrate(MSG_DOWNLOADED, st.st_size - restartat, started, name, 0);
     end:
-    restartat = (off_t) 0;
+        restartat = (off_t) 0;
 }
 
 void dorest(const char *name)
@@ -4124,8 +4145,7 @@ void dostor(char *name, const int append
             if (UNWRAP_FAILURE == unwrap_data (xferfd, buf, &r)) {
                 goto end;
             }
-        }
-        else
+        } else
 #endif  /* WITH_GSSAPI */
         {       /*      Enclosing read call to accomodate the 'else'    */
             r = read(xferfd, buf, sizeof_buf);
